definitions:
  models.Account:
    properties:
      account:
        type: integer
      balance:
        type: number
      client:
        type: string
      created_at:
        type: string
      emails:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.CreateAccount:
    properties:
      client:
        type: string
      emails:
        type: string
    required:
    - client
    - emails
    type: object
  models.CreateTransaction:
    properties:
      account:
        type: integer
      amount:
        type: number
      date:
        type: string
    required:
    - account
    - amount
    - date
    type: object
  models.File:
    properties:
      created_at:
        type: string
      id:
        type: integer
      location:
        type: string
      name:
        type: string
      output:
        type: string
      processed:
        type: boolean
      updated_at:
        type: string
    type: object
  models.LoginUser:
    properties:
      password:
        type: string
      username:
        type: string
    required:
    - password
    - username
    type: object
  models.ProcessFile:
    properties:
      name:
        type: string
    required:
    - name
    type: object
  models.Transaction:
    properties:
      account:
        type: integer
      amount:
        type: number
      created_at:
        type: string
      date:
        type: string
      id:
        type: integer
      updated_at:
        type: string
    type: object
  models.UpdateAccount:
    properties:
      client:
        type: string
      emails:
        type: string
    type: object
  models.UpdateTransaction:
    properties:
      account:
        type: integer
      amount:
        type: number
      date:
        type: string
    required:
    - account
    - amount
    - date
    type: object
  models.UploadFile:
    properties:
      name:
        type: string
    required:
    - name
    type: object
info:
  contact: {}
paths:
  /_:
    get:
      consumes:
      - application/json
      description: do ping
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
      summary: Healthcheck
      tags:
      - Healthcheck
  /accounts:
    get:
      description: Get a list of all accounts with optional pagination
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of accounts
          schema:
            items:
              $ref: '#/definitions/models.Account'
            type: array
      security:
      - JwtAuth: []
      summary: Get all accounts with pagination
      tags:
      - Accounts
    post:
      consumes:
      - application/json
      description: Create a new account with the given input data
      parameters:
      - description: Create account object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateAccount'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created account
          schema:
            $ref: '#/definitions/models.Account'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Create a new account
      tags:
      - Accounts
  /accounts/{id}:
    delete:
      description: Delete the account with the given ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Successfully deleted account
          schema:
            $ref: '#/definitions/models.Account'
        "404":
          description: account not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Delete an account by ID
      tags:
      - Accounts
    get:
      description: Get details of an account by its ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved account
          schema:
            $ref: '#/definitions/models.Account'
        "404":
          description: Account not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Find an account by ID
      tags:
      - Accounts
    put:
      consumes:
      - application/json
      description: Update the account details for the given ID
      parameters:
      - description: Account ID
        in: path
        name: id
        required: true
        type: string
      - description: Update account object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateAccount'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated account
          schema:
            $ref: '#/definitions/models.Account'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: account not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Update an account by ID
      tags:
      - Accounts
  /emails/{emails}:
    post:
      consumes:
      - application/json
      responses:
        "200":
          description: Email sent successfully
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Send account statement by Email
      tags:
      - Emails
  /files:
    get:
      consumes:
      - application/json
      description: Get a list of all files with optional pagination
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of files
          schema:
            items:
              $ref: '#/definitions/models.File'
            type: array
      security:
      - JwtAuth: []
      summary: Get all files with pagination
      tags:
      - Files
  /files/{id}:
    get:
      consumes:
      - application/json
      description: Get details of a file by its ID
      parameters:
      - description: File ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved file
          schema:
            $ref: '#/definitions/models.File'
        "404":
          description: File not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Find file by ID
      tags:
      - Files
  /files/process:
    post:
      consumes:
      - application/json
      parameters:
      - description: Upload file
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.ProcessFile'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully processed file
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Process a file
      tags:
      - Files
  /files/upload:
    post:
      consumes:
      - application/json
      parameters:
      - description: Upload file
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UploadFile'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created file
          schema:
            $ref: '#/definitions/models.File'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Upload a new file
      tags:
      - Files
  /login:
    post:
      consumes:
      - application/json
      description: Authenticates a user using username and password, returns a JWT
        token if successful
      parameters:
      - description: User login object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: JWT Token
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Authenticate a user
      tags:
      - User
  /register:
    post:
      consumes:
      - application/json
      description: Registers a new user with the given username and password
      parameters:
      - description: User registration object
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.LoginUser'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully registered
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "500":
          description: Internal Server Error
          schema:
            type: string
      security:
      - ApiKeyAuth: []
      summary: Register a new user
      tags:
      - User
  /transactions:
    get:
      description: Get a list of all transactions with optional pagination
      parameters:
      - default: 0
        description: Offset for pagination
        in: query
        name: offset
        type: integer
      - default: 10
        description: Limit for pagination
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved list of transactions
          schema:
            items:
              $ref: '#/definitions/models.Transaction'
            type: array
      security:
      - JwtAuth: []
      summary: Get all transactions with pagination
      tags:
      - Transactions
    post:
      consumes:
      - application/json
      description: Create a new transaction with the given input data
      parameters:
      - description: Create transaction object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.CreateTransaction'
      produces:
      - application/json
      responses:
        "201":
          description: Successfully created transaction
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Create a new transaction
      tags:
      - Transactions
  /transactions/{id}:
    delete:
      description: Delete the transaction with the given ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "202":
          description: Successfully deleted transaction
          schema:
            $ref: '#/definitions/models.Transaction'
        "404":
          description: transaction not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Delete a transaction by ID
      tags:
      - Transactions
    get:
      description: Get details of a transaction by its ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Successfully retrieved transaction
          schema:
            $ref: '#/definitions/models.Transaction'
        "404":
          description: Transaction not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Find a transaction by ID
      tags:
      - Transactions
    put:
      consumes:
      - application/json
      description: Update the transaction details for the given ID
      parameters:
      - description: Transaction ID
        in: path
        name: id
        required: true
        type: string
      - description: Update transaction object
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.UpdateTransaction'
      produces:
      - application/json
      responses:
        "200":
          description: Successfully updated transaction
          schema:
            $ref: '#/definitions/models.Transaction'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: transaction not found
          schema:
            type: string
      security:
      - JwtAuth: []
      summary: Update a transaction by ID
      tags:
      - Transactions
swagger: "2.0"
